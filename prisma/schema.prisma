generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accept {
  id                    Int                     @id(map: "accept_pk") @default(autoincrement())
  type                  status_accept
  created_at            DateTime                @db.Date
  update_at             DateTime                @db.Date
  equipment_information equipment_information[]
}

model address {
  id       Int        @id(map: "address_pk") @default(autoincrement())
  city     String     @db.VarChar(100)
  state    String     @db.VarChar(100)
  register register[]
}

model certificate {
  id                    Int                     @id(map: "certificate_pk") @default(autoincrement())
  path                  String
  signed                Boolean                 @default(false)
  created_at            DateTime                @db.Date
  update_at             DateTime                @db.Date
  equipment_information equipment_information[]
}

model equipment_information {
  id               Int          @id(map: "equipment_information_pk") @default(autoincrement())
  register_id      Int          @default(autoincrement())
  order            Int          @unique
  type_service     service_type
  service_location location
  equipment_name   String       @db.VarChar(50)
  serial_number    String?      @db.VarChar(50)
  number_nf        Int?
  status_id        Int          @default(autoincrement())
  accept_id        Int          @default(autoincrement())
  certificate_id   Int          @default(autoincrement())
  transport_id     Int          @default(autoincrement())
  register         register     @relation(fields: [register_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "equipment_information_fk0")
  status           status       @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "equipment_information_fk1")
  accept           accept       @relation(fields: [accept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "equipment_information_fk2")
  certificate      certificate  @relation(fields: [certificate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "equipment_information_fk3")
  transport        transport    @relation(fields: [transport_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "equipment_information_fk4")
}

model login {
  id       Int     @id(map: "login_pk") @default(autoincrement())
  name     String  @db.VarChar(100)
  cnpj     String  @db.VarChar(14)
  email    String  @unique @db.VarChar(100)
  password String  @db.VarChar(100)
  is_admin Boolean
}

model login_user {
  id          Int        @id(map: "login_user_pk") @default(autoincrement())
  name        String     @db.VarChar(100)
  cnpj_or_cpf String     @db.VarChar(14)
  email       String     @unique @db.VarChar(100)
  password    String     @db.VarChar(100)
  login_id    Int
  register    register[]
}

model register {
  id                    Int                     @id(map: "register_pk") @default(autoincrement())
  arrival_date          DateTime                @db.Date
  cnpj_or_cpf_client    String                  @db.VarChar(14)
  name_client           String                  @db.VarChar(150)
  address_id            Int                     @default(autoincrement())
  id_login_user         Int
  equipment_information equipment_information[]
  address               address                 @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "register_fk0")
  login_user            login_user              @relation(fields: [id_login_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "register_fk1")
}

model status {
  id                    Int                     @id(map: "status_pk") @default(autoincrement())
  type                  name_status             @default(Avalia__o)
  created_at            DateTime                @db.Date
  update_at             DateTime                @db.Date
  equipment_information equipment_information[]
}

model transport {
  id                    Int                     @id(map: "transport_pk") @default(autoincrement())
  type                  status_transport?
  shopping_company      String?                 @db.VarChar(255)
  collection_date       DateTime?               @db.Date
  equipment_information equipment_information[]
}

enum location {
  Interno
  externo
}

enum name_status {
  Avalia__o        @map("Avaliação")
  Or_amento_Gerado @map("Orçamento Gerado")
}

enum service_type {
  Preventiva
  Corretiva
  Garantia
}

enum status_accept {
  Aguardando_Aprova__o @map("Aguardando Aprovação")
  Aprovado
  Recusado
}

enum status_transport {
  Aguardando_informa__es @map("Aguardando informações")
  Aguardando_Coleta      @map("Aguardando Coleta")
  Coletado
}
